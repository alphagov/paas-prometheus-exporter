// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-prometheus-exporter/test"
	"github.com/prometheus/client_golang/prometheus"
)

type FakeRegisterer struct {
	MustRegisterStub        func(...prometheus.Collector)
	mustRegisterMutex       sync.RWMutex
	mustRegisterArgsForCall []struct {
		arg1 []prometheus.Collector
	}
	RegisterStub        func(prometheus.Collector) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 prometheus.Collector
	}
	registerReturns struct {
		result1 error
	}
	registerReturnsOnCall map[int]struct {
		result1 error
	}
	UnregisterStub        func(prometheus.Collector) bool
	unregisterMutex       sync.RWMutex
	unregisterArgsForCall []struct {
		arg1 prometheus.Collector
	}
	unregisterReturns struct {
		result1 bool
	}
	unregisterReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRegisterer) MustRegister(arg1 ...prometheus.Collector) {
	fake.mustRegisterMutex.Lock()
	fake.mustRegisterArgsForCall = append(fake.mustRegisterArgsForCall, struct {
		arg1 []prometheus.Collector
	}{arg1})
	stub := fake.MustRegisterStub
	fake.recordInvocation("MustRegister", []interface{}{arg1})
	fake.mustRegisterMutex.Unlock()
	if stub != nil {
		fake.MustRegisterStub(arg1...)
	}
}

func (fake *FakeRegisterer) MustRegisterCallCount() int {
	fake.mustRegisterMutex.RLock()
	defer fake.mustRegisterMutex.RUnlock()
	return len(fake.mustRegisterArgsForCall)
}

func (fake *FakeRegisterer) MustRegisterCalls(stub func(...prometheus.Collector)) {
	fake.mustRegisterMutex.Lock()
	defer fake.mustRegisterMutex.Unlock()
	fake.MustRegisterStub = stub
}

func (fake *FakeRegisterer) MustRegisterArgsForCall(i int) []prometheus.Collector {
	fake.mustRegisterMutex.RLock()
	defer fake.mustRegisterMutex.RUnlock()
	argsForCall := fake.mustRegisterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegisterer) Register(arg1 prometheus.Collector) error {
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 prometheus.Collector
	}{arg1})
	stub := fake.RegisterStub
	fakeReturns := fake.registerReturns
	fake.recordInvocation("Register", []interface{}{arg1})
	fake.registerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRegisterer) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeRegisterer) RegisterCalls(stub func(prometheus.Collector) error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeRegisterer) RegisterArgsForCall(i int) prometheus.Collector {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegisterer) RegisterReturns(result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegisterer) RegisterReturnsOnCall(i int, result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegisterer) Unregister(arg1 prometheus.Collector) bool {
	fake.unregisterMutex.Lock()
	ret, specificReturn := fake.unregisterReturnsOnCall[len(fake.unregisterArgsForCall)]
	fake.unregisterArgsForCall = append(fake.unregisterArgsForCall, struct {
		arg1 prometheus.Collector
	}{arg1})
	stub := fake.UnregisterStub
	fakeReturns := fake.unregisterReturns
	fake.recordInvocation("Unregister", []interface{}{arg1})
	fake.unregisterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRegisterer) UnregisterCallCount() int {
	fake.unregisterMutex.RLock()
	defer fake.unregisterMutex.RUnlock()
	return len(fake.unregisterArgsForCall)
}

func (fake *FakeRegisterer) UnregisterCalls(stub func(prometheus.Collector) bool) {
	fake.unregisterMutex.Lock()
	defer fake.unregisterMutex.Unlock()
	fake.UnregisterStub = stub
}

func (fake *FakeRegisterer) UnregisterArgsForCall(i int) prometheus.Collector {
	fake.unregisterMutex.RLock()
	defer fake.unregisterMutex.RUnlock()
	argsForCall := fake.unregisterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegisterer) UnregisterReturns(result1 bool) {
	fake.unregisterMutex.Lock()
	defer fake.unregisterMutex.Unlock()
	fake.UnregisterStub = nil
	fake.unregisterReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRegisterer) UnregisterReturnsOnCall(i int, result1 bool) {
	fake.unregisterMutex.Lock()
	defer fake.unregisterMutex.Unlock()
	fake.UnregisterStub = nil
	if fake.unregisterReturnsOnCall == nil {
		fake.unregisterReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.unregisterReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRegisterer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mustRegisterMutex.RLock()
	defer fake.mustRegisterMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.unregisterMutex.RLock()
	defer fake.unregisterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRegisterer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ test.Registerer = new(FakeRegisterer)

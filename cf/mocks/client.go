// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-prometheus-exporter/cf"
	cfclient "github.com/cloudfoundry-community/go-cfclient"
)

type FakeClient struct {
	DopplerEndpointStub        func() string
	dopplerEndpointMutex       sync.RWMutex
	dopplerEndpointArgsForCall []struct {
	}
	dopplerEndpointReturns struct {
		result1 string
	}
	dopplerEndpointReturnsOnCall map[int]struct {
		result1 string
	}
	GetTokenStub        func() (string, error)
	getTokenMutex       sync.RWMutex
	getTokenArgsForCall []struct {
	}
	getTokenReturns struct {
		result1 string
		result2 error
	}
	getTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ListAppsWithSpaceAndOrgStub        func() ([]cfclient.App, error)
	listAppsWithSpaceAndOrgMutex       sync.RWMutex
	listAppsWithSpaceAndOrgArgsForCall []struct {
	}
	listAppsWithSpaceAndOrgReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsWithSpaceAndOrgReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	ListServicesWithSpaceAndOrgStub        func() ([]cf.ServiceInstance, error)
	listServicesWithSpaceAndOrgMutex       sync.RWMutex
	listServicesWithSpaceAndOrgArgsForCall []struct {
	}
	listServicesWithSpaceAndOrgReturns struct {
		result1 []cf.ServiceInstance
		result2 error
	}
	listServicesWithSpaceAndOrgReturnsOnCall map[int]struct {
		result1 []cf.ServiceInstance
		result2 error
	}
	NewAppStreamProviderStub        func(string) cf.AppStreamProvider
	newAppStreamProviderMutex       sync.RWMutex
	newAppStreamProviderArgsForCall []struct {
		arg1 string
	}
	newAppStreamProviderReturns struct {
		result1 cf.AppStreamProvider
	}
	newAppStreamProviderReturnsOnCall map[int]struct {
		result1 cf.AppStreamProvider
	}
	RefreshAuthTokenStub        func() (string, error)
	refreshAuthTokenMutex       sync.RWMutex
	refreshAuthTokenArgsForCall []struct {
	}
	refreshAuthTokenReturns struct {
		result1 string
		result2 error
	}
	refreshAuthTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) DopplerEndpoint() string {
	fake.dopplerEndpointMutex.Lock()
	ret, specificReturn := fake.dopplerEndpointReturnsOnCall[len(fake.dopplerEndpointArgsForCall)]
	fake.dopplerEndpointArgsForCall = append(fake.dopplerEndpointArgsForCall, struct {
	}{})
	stub := fake.DopplerEndpointStub
	fakeReturns := fake.dopplerEndpointReturns
	fake.recordInvocation("DopplerEndpoint", []interface{}{})
	fake.dopplerEndpointMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DopplerEndpointCallCount() int {
	fake.dopplerEndpointMutex.RLock()
	defer fake.dopplerEndpointMutex.RUnlock()
	return len(fake.dopplerEndpointArgsForCall)
}

func (fake *FakeClient) DopplerEndpointCalls(stub func() string) {
	fake.dopplerEndpointMutex.Lock()
	defer fake.dopplerEndpointMutex.Unlock()
	fake.DopplerEndpointStub = stub
}

func (fake *FakeClient) DopplerEndpointReturns(result1 string) {
	fake.dopplerEndpointMutex.Lock()
	defer fake.dopplerEndpointMutex.Unlock()
	fake.DopplerEndpointStub = nil
	fake.dopplerEndpointReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) DopplerEndpointReturnsOnCall(i int, result1 string) {
	fake.dopplerEndpointMutex.Lock()
	defer fake.dopplerEndpointMutex.Unlock()
	fake.DopplerEndpointStub = nil
	if fake.dopplerEndpointReturnsOnCall == nil {
		fake.dopplerEndpointReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.dopplerEndpointReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) GetToken() (string, error) {
	fake.getTokenMutex.Lock()
	ret, specificReturn := fake.getTokenReturnsOnCall[len(fake.getTokenArgsForCall)]
	fake.getTokenArgsForCall = append(fake.getTokenArgsForCall, struct {
	}{})
	stub := fake.GetTokenStub
	fakeReturns := fake.getTokenReturns
	fake.recordInvocation("GetToken", []interface{}{})
	fake.getTokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetTokenCallCount() int {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	return len(fake.getTokenArgsForCall)
}

func (fake *FakeClient) GetTokenCalls(stub func() (string, error)) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = stub
}

func (fake *FakeClient) GetTokenReturns(result1 string, result2 error) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	fake.getTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	if fake.getTokenReturnsOnCall == nil {
		fake.getTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListAppsWithSpaceAndOrg() ([]cfclient.App, error) {
	fake.listAppsWithSpaceAndOrgMutex.Lock()
	ret, specificReturn := fake.listAppsWithSpaceAndOrgReturnsOnCall[len(fake.listAppsWithSpaceAndOrgArgsForCall)]
	fake.listAppsWithSpaceAndOrgArgsForCall = append(fake.listAppsWithSpaceAndOrgArgsForCall, struct {
	}{})
	stub := fake.ListAppsWithSpaceAndOrgStub
	fakeReturns := fake.listAppsWithSpaceAndOrgReturns
	fake.recordInvocation("ListAppsWithSpaceAndOrg", []interface{}{})
	fake.listAppsWithSpaceAndOrgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListAppsWithSpaceAndOrgCallCount() int {
	fake.listAppsWithSpaceAndOrgMutex.RLock()
	defer fake.listAppsWithSpaceAndOrgMutex.RUnlock()
	return len(fake.listAppsWithSpaceAndOrgArgsForCall)
}

func (fake *FakeClient) ListAppsWithSpaceAndOrgCalls(stub func() ([]cfclient.App, error)) {
	fake.listAppsWithSpaceAndOrgMutex.Lock()
	defer fake.listAppsWithSpaceAndOrgMutex.Unlock()
	fake.ListAppsWithSpaceAndOrgStub = stub
}

func (fake *FakeClient) ListAppsWithSpaceAndOrgReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsWithSpaceAndOrgMutex.Lock()
	defer fake.listAppsWithSpaceAndOrgMutex.Unlock()
	fake.ListAppsWithSpaceAndOrgStub = nil
	fake.listAppsWithSpaceAndOrgReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListAppsWithSpaceAndOrgReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsWithSpaceAndOrgMutex.Lock()
	defer fake.listAppsWithSpaceAndOrgMutex.Unlock()
	fake.ListAppsWithSpaceAndOrgStub = nil
	if fake.listAppsWithSpaceAndOrgReturnsOnCall == nil {
		fake.listAppsWithSpaceAndOrgReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsWithSpaceAndOrgReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicesWithSpaceAndOrg() ([]cf.ServiceInstance, error) {
	fake.listServicesWithSpaceAndOrgMutex.Lock()
	ret, specificReturn := fake.listServicesWithSpaceAndOrgReturnsOnCall[len(fake.listServicesWithSpaceAndOrgArgsForCall)]
	fake.listServicesWithSpaceAndOrgArgsForCall = append(fake.listServicesWithSpaceAndOrgArgsForCall, struct {
	}{})
	stub := fake.ListServicesWithSpaceAndOrgStub
	fakeReturns := fake.listServicesWithSpaceAndOrgReturns
	fake.recordInvocation("ListServicesWithSpaceAndOrg", []interface{}{})
	fake.listServicesWithSpaceAndOrgMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServicesWithSpaceAndOrgCallCount() int {
	fake.listServicesWithSpaceAndOrgMutex.RLock()
	defer fake.listServicesWithSpaceAndOrgMutex.RUnlock()
	return len(fake.listServicesWithSpaceAndOrgArgsForCall)
}

func (fake *FakeClient) ListServicesWithSpaceAndOrgCalls(stub func() ([]cf.ServiceInstance, error)) {
	fake.listServicesWithSpaceAndOrgMutex.Lock()
	defer fake.listServicesWithSpaceAndOrgMutex.Unlock()
	fake.ListServicesWithSpaceAndOrgStub = stub
}

func (fake *FakeClient) ListServicesWithSpaceAndOrgReturns(result1 []cf.ServiceInstance, result2 error) {
	fake.listServicesWithSpaceAndOrgMutex.Lock()
	defer fake.listServicesWithSpaceAndOrgMutex.Unlock()
	fake.ListServicesWithSpaceAndOrgStub = nil
	fake.listServicesWithSpaceAndOrgReturns = struct {
		result1 []cf.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicesWithSpaceAndOrgReturnsOnCall(i int, result1 []cf.ServiceInstance, result2 error) {
	fake.listServicesWithSpaceAndOrgMutex.Lock()
	defer fake.listServicesWithSpaceAndOrgMutex.Unlock()
	fake.ListServicesWithSpaceAndOrgStub = nil
	if fake.listServicesWithSpaceAndOrgReturnsOnCall == nil {
		fake.listServicesWithSpaceAndOrgReturnsOnCall = make(map[int]struct {
			result1 []cf.ServiceInstance
			result2 error
		})
	}
	fake.listServicesWithSpaceAndOrgReturnsOnCall[i] = struct {
		result1 []cf.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) NewAppStreamProvider(arg1 string) cf.AppStreamProvider {
	fake.newAppStreamProviderMutex.Lock()
	ret, specificReturn := fake.newAppStreamProviderReturnsOnCall[len(fake.newAppStreamProviderArgsForCall)]
	fake.newAppStreamProviderArgsForCall = append(fake.newAppStreamProviderArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.NewAppStreamProviderStub
	fakeReturns := fake.newAppStreamProviderReturns
	fake.recordInvocation("NewAppStreamProvider", []interface{}{arg1})
	fake.newAppStreamProviderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) NewAppStreamProviderCallCount() int {
	fake.newAppStreamProviderMutex.RLock()
	defer fake.newAppStreamProviderMutex.RUnlock()
	return len(fake.newAppStreamProviderArgsForCall)
}

func (fake *FakeClient) NewAppStreamProviderCalls(stub func(string) cf.AppStreamProvider) {
	fake.newAppStreamProviderMutex.Lock()
	defer fake.newAppStreamProviderMutex.Unlock()
	fake.NewAppStreamProviderStub = stub
}

func (fake *FakeClient) NewAppStreamProviderArgsForCall(i int) string {
	fake.newAppStreamProviderMutex.RLock()
	defer fake.newAppStreamProviderMutex.RUnlock()
	argsForCall := fake.newAppStreamProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) NewAppStreamProviderReturns(result1 cf.AppStreamProvider) {
	fake.newAppStreamProviderMutex.Lock()
	defer fake.newAppStreamProviderMutex.Unlock()
	fake.NewAppStreamProviderStub = nil
	fake.newAppStreamProviderReturns = struct {
		result1 cf.AppStreamProvider
	}{result1}
}

func (fake *FakeClient) NewAppStreamProviderReturnsOnCall(i int, result1 cf.AppStreamProvider) {
	fake.newAppStreamProviderMutex.Lock()
	defer fake.newAppStreamProviderMutex.Unlock()
	fake.NewAppStreamProviderStub = nil
	if fake.newAppStreamProviderReturnsOnCall == nil {
		fake.newAppStreamProviderReturnsOnCall = make(map[int]struct {
			result1 cf.AppStreamProvider
		})
	}
	fake.newAppStreamProviderReturnsOnCall[i] = struct {
		result1 cf.AppStreamProvider
	}{result1}
}

func (fake *FakeClient) RefreshAuthToken() (string, error) {
	fake.refreshAuthTokenMutex.Lock()
	ret, specificReturn := fake.refreshAuthTokenReturnsOnCall[len(fake.refreshAuthTokenArgsForCall)]
	fake.refreshAuthTokenArgsForCall = append(fake.refreshAuthTokenArgsForCall, struct {
	}{})
	stub := fake.RefreshAuthTokenStub
	fakeReturns := fake.refreshAuthTokenReturns
	fake.recordInvocation("RefreshAuthToken", []interface{}{})
	fake.refreshAuthTokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RefreshAuthTokenCallCount() int {
	fake.refreshAuthTokenMutex.RLock()
	defer fake.refreshAuthTokenMutex.RUnlock()
	return len(fake.refreshAuthTokenArgsForCall)
}

func (fake *FakeClient) RefreshAuthTokenCalls(stub func() (string, error)) {
	fake.refreshAuthTokenMutex.Lock()
	defer fake.refreshAuthTokenMutex.Unlock()
	fake.RefreshAuthTokenStub = stub
}

func (fake *FakeClient) RefreshAuthTokenReturns(result1 string, result2 error) {
	fake.refreshAuthTokenMutex.Lock()
	defer fake.refreshAuthTokenMutex.Unlock()
	fake.RefreshAuthTokenStub = nil
	fake.refreshAuthTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RefreshAuthTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.refreshAuthTokenMutex.Lock()
	defer fake.refreshAuthTokenMutex.Unlock()
	fake.RefreshAuthTokenStub = nil
	if fake.refreshAuthTokenReturnsOnCall == nil {
		fake.refreshAuthTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.refreshAuthTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dopplerEndpointMutex.RLock()
	defer fake.dopplerEndpointMutex.RUnlock()
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	fake.listAppsWithSpaceAndOrgMutex.RLock()
	defer fake.listAppsWithSpaceAndOrgMutex.RUnlock()
	fake.listServicesWithSpaceAndOrgMutex.RLock()
	defer fake.listServicesWithSpaceAndOrgMutex.RUnlock()
	fake.newAppStreamProviderMutex.RLock()
	defer fake.newAppStreamProviderMutex.RUnlock()
	fake.refreshAuthTokenMutex.RLock()
	defer fake.refreshAuthTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.Client = new(FakeClient)
